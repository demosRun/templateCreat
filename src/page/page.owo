<template lang="pug">
.home
  .panel
    .left
      .show
    .right
      .title 模块选择
      .module-box
      .title 背景设置
      .input-box
        span 背景颜色
        .color-input-box
          input.color-select(type="color" o-value="this.data.color")
          input.color-text(type="text" o-value="this.data.color")
      .input-box
        span 背景图片
        .text-input-box
          input(type="text" o-value="this.data.bgUrl")
      .title 模块设置
      textarea#styleEdit(value="")
      .title 内容设置
      textarea#htmlEdit(value="")
      .button-box
        .button(o-tap="reMake") 生成
        .button(o-tap="output") 导出图片
</template>

<script>
  module.exports = {
    data: {
      shuoming: {
        name: '图片说明',
        template: '<div style="background-image: url(./static/resource/card-bg.jpg);font-size: 26px;line-height: 60px;height: 60px;overflow: hidden;width: 94%;margin: 0 auto;margin-bottom: 20px;color: #222;"><div [[1]]>{{0}}</div></div>',
        styleData: [{
          "background-image": "url('@|doit.png|')",
          "padding-left": "35px",
          "background-repeat": "no-repeat",
          "background-position": "10px center",
          "width": "88%",
        }],
        edit: ['图片的说明']
      },
    },
    created: function () {
      console.log(this.query('.color-select').value)
      setTimeout(() => {
        this.make()
      }, 100);
      let moduleHTML = ''
      for (const key in this.data.module) {
        if (this.data.module.hasOwnProperty(key)) {
          const element = this.data.module[key];
          moduleHTML += `<div class="module-item" o-tap="selectModule('${key}')">${element.name}</div>`
        }
      }
      this.query('.module-box').innerHTML = moduleHTML
      setTimeout(() => {
        this.handleEvent(this, this.query('.module-box'))
      }, 0);
      
    },
    make: function () {
      // 背景颜色
      const showBox = this.query('.show')
      showBox.style.backgroundColor = this.data.color
      showBox.style.backgroundImage = `url(${this.data.bgUrl})`
    },
    output: function () {
      html2canvas(this.query('.show'), {"allowTaint": false}).then(canvas => {
        var imgData = canvas.toDataURL('image/octet-stream');
        if (canvas.msToBlob) {     // IE 9+浏览器
          var blob = canvas.msToBlob();
          window.navigator.msSaveBlob(blob, 'test.png');
        } else {
          this.saveFile(imgData, 'test.png');
        }
      });
    },
    // 生成样式字符串
    creatStyleStr: function (ele, key) {
      ele.showHTML = ele.template
      for (let index = 0; index < ele['styleData'].length; index++) {
        let styleData = ''
        const styleItem = ele['styleData'][index];
        for (const key in styleItem) {
          if (styleItem.hasOwnProperty(key)) {
            const styleValue = styleItem[key];
            styleData += `${key}: ${styleValue};`
          }
        }
        // console.log(styleData)
        ele.showHTML = ele.showHTML.replace(`[[${index}]]`, `class="tem" key="${key}" ind="${index}" style="${styleData}"`)
      }
      return ele
    },
    selectModule: function (name) {
      let item = this.data.module[name]
      this.data.showList.push(item)
      
      this.outPutShow()
    },
    outPutShow: function () {
      let newShowHTML = ''
      for (let index = 0; index < this.data.showList.length; index++) {
        const item = this.data.showList[index];
        // 替换样式
        item = this.creatStyleStr(item, index)
        // console.log(item)
        let template = item['showHTML']
        // 模板插值
        for (const ind in item['edit']) {
          if (item['edit'].hasOwnProperty(ind)) {
            const element = item['edit'][ind];
            template = template.replace(`{{${ind}}}`, element)
          }
        }
        newShowHTML += template 
      }
      
      this.query('.show').innerHTML = newShowHTML
      setTimeout(() => {
        this.queryAll('.show .tem').forEach(element => {
          element.onclick = owo.script.page.changeStyle
        });
      }, 100);
    },
    saveFile: function (data, filename) {
      var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
      save_link.href = data;
      save_link.download = filename;
      var event = document.createEvent('MouseEvents');
      event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      save_link.dispatchEvent(event);
    },
    changeStyle: function () {
      const index1 = parseInt(this.getAttribute('key'))
      const index2 = parseInt(this.getAttribute('ind'))
      owo.script.page.data.activeIndex1 = index1
      owo.script.page.data.activeIndex2 = index2
      const styleData = owo.script.page.data.showList[index1].styleData[index2]
      console.log(styleData)
      owo.query('#styleEdit')[0].innerText = JSON.stringify(styleData)
      owo.query('#htmlEdit')[0].innerText = JSON.stringify(owo.script.page.data.showList[index1].edit)
    },
    reMake: function () {
      const newStyleData = owo.query('#styleEdit')[0].value
      const newHtmlData = owo.query('#htmlEdit')[0].value
      owo.script.page.data.showList[this.data.activeIndex1].styleData[this.data.activeIndex2] = JSON.parse(newStyleData)
      owo.script.page.data.showList[this.data.activeIndex1].edit = JSON.parse(newHtmlData)
      // console.log(owo.script.page.data.showList)
      this.outPutShow()
    }
  }
</script>


<style lang="less">
.home {
  width: 100%;
  height: 100%;
}
.panel {
  display: flex;
  width: 100%;
  height: 100%;
}
.left {
  height: 100%;
  overflow: auto;
  width: calc(100% - 300px);
}
.right {
  width: 300px;
  height: 100%;
  position: relative;
  background-color: white;
  textarea {
    background-color: gainsboro;
    padding: 10px;
    width: calc(100% - 20px);
    height: 300px;
    display: block;
  }
}
.show {
  width: 750px;
  margin: 0 auto;
  background-color: white;
  background-size: 100% auto;
  background-repeat: no-repeat;
}
.button-box {
  position: absolute;
  bottom: 0px;
  width: 100%;
}
.button {
  background-color: #009fe9;
  color: white;
  text-align: center;
  line-height: 45px;
  font-size: 20px;
  
  height: 45px;
  cursor: pointer;
}
.input-box {
  display: flex;
  justify-content: space-between;
  height: 40px;
  align-items: center;
  padding: 0 20px;
}
.color-input-box {
  display: flex;
  width: 95px;
  border: 1px solid #ccc;
  .color-select {
    border: none;
    padding: 0;
    margin: 0;
    width: 25px;
    height: 25px;
  }
  .color-text {
    width: 60px;
    border: none;
    background-color: gainsboro;
    padding: 0 5px;
    outline: none;
  }
}
.text-input-box {
  input {
    height: 27px;
    padding: 0 10px;
    width: 140px;
    background-color: gainsboro;
    border: none;
  }
}
.title {
  background-color: moccasin;
  line-height: 30px;
  padding: 0 5px;
}

.tem {
  cursor: pointer;
}
.tem:hover {
  background-color: rgba(0, 0, 0, 0.6);
}
</style>
